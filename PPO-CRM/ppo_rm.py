from baselines.common import Dataset, explained_variance, fmt_row, zipsame
from baselines import logger
import baselines.common.tf_util as U
from numpy.lib.function_base import average
from pyglet.gl.glext_arb import GL_ATI_element_array
import tensorflow as tf, numpy as np
import time
from baselines.common.mpi_adam import MpiAdam
from baselines.common.mpi_moments import mpi_moments
from mpi4py import MPI
from collections import deque

#!/usr/bin/env python3

from baselines.common.cmd_util import make_mujoco_env, mujoco_arg_parser
from baselines.common import tf_util as U
from baselines import logger

average_rm = False
use_crm = False

def learn(env, num_timesteps, seed):
    from baselines.ppo1 import mlp_policy
    U.make_session(num_cpu=1).__enter__()
    def policy_fn(name, ob_space, ac_space):
        return mlp_policy.MlpPolicy(name=name, ob_space=ob_space, ac_space=ac_space,
            hid_size=64, num_hid_layers=2)
    model = learn_internal(env, policy_fn,
            max_timesteps=num_timesteps,
            timesteps_per_actorbatch=1000,
            clip_param=0.3, entcoeff=0.0,
            optim_epochs=10, optim_stepsize=3e-4, optim_batchsize=64,
            gamma=0.99, lam=0.99, schedule='linear',
        )
    return model,env

def traj_segment_generator(pi, env, horizon, stochastic):
    t = 0
    ac = env.action_space.sample() # not used, just so we have the datatype
    new = True # marks if we're on first timestep of an episode
    ob = env.reset()
    last_ob = ob 

    cur_ep_ret = 0 # return in current episode
    cur_ep_len = 0 # len of current episode
    ep_rets = [] # returns of completed episodes in this segment
    ep_lens = [] # lengths of ...

    if use_crm:
        if average_rm:
            # Initialize history arrays
            obs = np.array([ob for _ in range(horizon)])
            rews = np.zeros(horizon, 'float32')
            vpreds = np.zeros(horizon, 'float32')
            news = np.zeros(horizon, 'int32')
            acs = np.array([ac for _ in range(horizon)])
            prevacs = acs.copy()
        else:
            # use list
            obs = []    # observation
            rews = []   # reward
            vpreds = [] # state value
            news = []   # done
            acs = []    # actions
            prevacs = [] # previous action?
    else:
        # Initialize history arrays
        obs = np.array([ob for _ in range(horizon)])
        rews = np.zeros(horizon, 'float32')
        vpreds = np.zeros(horizon, 'float32')
        news = np.zeros(horizon, 'int32')
        acs = np.array([ac for _ in range(horizon)])
        prevacs = acs.copy()

    total_reward = 0.0
    total_steps = 0.0

    while True:
        prevac = ac # previous action
        ac, vpred = pi.act(stochastic, ob)
        # Slight weirdness here because we need value function at time T
        # before returning segment [0, T-1] so we get the correct
        # terminal value
        if t > 0 and t % horizon == 0:
            #
            yield {"ob" : obs, "rew" : rews, "vpred" : vpreds, "new" : news,
                    "ac" : acs, "prevac" : prevacs, "nextvpred": vpred * (1 - new),
                    "ep_rets" : ep_rets, "ep_lens" : ep_lens,"reward_per_step":total_reward/total_steps}
            # Be careful!!! if you change the downstream algorithm to aggregate
            # several of these batches, then be sure to do a deepcopy
            ep_rets = []
            ep_lens = []
            total_reward = 0.0
            total_steps = 0.0


        if not use_crm:
            i = t % horizon
            obs[i] = ob
            news[i] = new

        # ob  : observation of next step, rew:reward, new: done flag, info:information
        # new : 0 for not done yet or 1 for done
        ob, rew, new, info = env.step(ac)

        total_reward += rew
        total_steps += 1.0

        i = t % horizon
        #new_obs, r, done, info = env.step(max_action * action)
        if use_crm:
            # if use averate reward to represent current reward
            reward_list = []
            experiences = info[0]["crm-experience"]
            if average_rm:
                for _obs, _action, _r, _new_obs, _done in experiences:
                    reward_list.append(_r)
                
                i = t % horizon
                rews[i] = average(reward_list)
                obs[i] = ob
                vpreds[i] = vpred
                news[i] = new
                acs[i] = ac
                prevacs[i] = prevac
                t += 1

            else: # use multi trajs to store reward
                i = t % horizon
                temp_obs = []    # observation
                temp_rews = []   # reward
                temp_vpreds = [] # state value
                temp_news = []   # done
                temp_acs = []    # actions
                temp_prevac = [] # previous action?
                # experiences = [(obs, action, info[0]["rs-reward"], new_obs, done)]
                for _obs, _action, _r, _new_obs, _done in experiences:
                    _obs.shape     = ob.shape
                    _action.shape  = ac.shape
                    _new_obs.shape = ob.shape
                    _r             = np.array([_r])
                    _done          = np.array([_done])
                    
                    temp_rews.append(_r)
                    temp_obs.append(_obs)
                    temp_vpreds.append(vpred)
                    temp_news.append(_done)
                    temp_acs.append(_action)
                    temp_prevac.append(prevac)

                rews.append(temp_rews)
                obs.append(temp_obs)
                vpreds.append(temp_vpreds)
                news.append(temp_news)
                acs.append(temp_acs)
                prevacs.append(temp_prevac)

                t += 1

        else:
            i = t % horizon
            rews[i] = rew
            vpreds[i] = vpred
            acs[i] = ac
            prevacs[i] = prevac
            t += 1

            
        cur_ep_ret += rew
        cur_ep_len += 1
        if new:
            ep_rets.append(cur_ep_ret)
            ep_lens.append(cur_ep_len)
            cur_ep_ret = 0
            cur_ep_len = 0
            ob = env.reset()
            last_ob = ob


def add_vtarg_and_adv(seg, gamma, lam):
    """
    Compute target value using TD(lambda) estimator, and advantage with GAE(lambda)
    """
    new = np.append(seg["new"], 0) # last element is only used for last vtarg, but we already zeroed it if last new = 1
    vpred = np.append(seg["vpred"], seg["nextvpred"])
    T = len(seg["rew"])
    seg["adv"] = gaelam = np.empty(T, 'float32')
    rew = seg["rew"]
    lastgaelam = 0
    for t in reversed(range(T)):
        nonterminal = 1-new[t+1]
        delta = rew[t] + gamma * vpred[t+1] * nonterminal - vpred[t]
        gaelam[t] = lastgaelam = delta + gamma * lam * nonterminal * lastgaelam
    seg["tdlamret"] = seg["adv"] + seg["vpred"]


# yield {"ob" : obs, "rew" : rews, "vpred" : vpreds, "new" : news,
#         "ac" : acs, "prevac" : prevacs, "nextvpred": vpred * (1 - new),
#         "ep_rets" : ep_rets, "ep_lens" : ep_lens}
def add_vtarg_and_adv_crm_multi_trajs(seg, gamma, lam):
    """
    Compute target value using TD(lambda) estimator, and advantage with GAE(lambda)
    """
    new = seg["new"]
    new.append([0]) # last element is only used for last vtarg, but we already zeroed it if last new = 1
    # vpred = np.append(seg["vpred"], seg["nextvpred"])
    vpred = seg["vpred"]
    traj_len = len(seg["rew"])
    # seg["adv"] = gaelam = np.empty(T, 'float32')

    rew = seg["rew"]
    obs = seg["ob"]
    acs = seg["ac"]
    
    
    lastgaelam = 0
    gaelam = []
    tdlamret_list = []
    obs_list = []
    action_list = []
    v_pred_list = []

    for t in reversed(range(traj_len)):
        total_gaelam = 0.0
        if t == (traj_len - 1):
            next_state_value = seg["nextvpred"]
            next_state_value = next_state_value[0]
        else:
            next_state_value = vpred[t+1][0]

        for idx in range(len(rew[t])):
            nonterminal = 1 - new[t+1][0]
    
            # vpred keep same in len(rew[t]), so we use the first one
            delta = rew[t][idx][0] + gamma * next_state_value * nonterminal - vpred[t][0]
            temp_gaelam = delta + gamma * lam * nonterminal * lastgaelam
            total_gaelam += temp_gaelam

            gaelam.append(temp_gaelam)
            tdlamret_list.append(temp_gaelam + vpred[t][0])
            obs_list.append(obs[t][idx])
            action_list.append(acs[t][idx])
            v_pred_list.append(vpred[t][0])
        lastgaelam = total_gaelam/len(rew[t])

    seg["adv"] = np.array(gaelam)
    
    seg["ob"] = np.array(obs_list)
    seg["ac"] = np.array(action_list)
    seg["vpred"] = np.array(v_pred_list)
    seg["tdlamret"] = np.array(tdlamret_list).reshape(seg["vpred"].shape)
    # seg["tdlamret"] = seg["adv"] + seg["vpred"]


def learn_internal(env, policy_fn, *,
        timesteps_per_actorbatch, # timesteps per actor per update
        clip_param, entcoeff, # clipping parameter epsilon, entropy coeff
        optim_epochs, optim_stepsize, optim_batchsize,# optimization hypers
        gamma, lam, # advantage estimation
        max_timesteps=0, max_episodes=0, max_iters=0, max_seconds=0,  # time constraint
        callback=None, # you can do anything in the callback, since it takes locals(), globals()
        adam_epsilon=1e-5,
        schedule='constant' # annealing for stepsize parameters (epsilon and adam)
        ):
    # Setup losses and stuff
    # ----------------------------------------
    ob_space = env.observation_space
    ac_space = env.action_space
    pi = policy_fn("pi", ob_space, ac_space) # Construct network for new policy
    oldpi = policy_fn("oldpi", ob_space, ac_space) # Network for old policy
    atarg = tf.placeholder(dtype=tf.float32, shape=[None]) # Target advantage function (if applicable)
    ret = tf.placeholder(dtype=tf.float32, shape=[None]) # Empirical return

    lrmult = tf.placeholder(name='lrmult', dtype=tf.float32, shape=[]) # learning rate multiplier, updated with schedule

    ob = U.get_placeholder_cached(name="ob")
    ac = pi.pdtype.sample_placeholder([None])

    kloldnew = oldpi.pd.kl(pi.pd)
    ent = pi.pd.entropy()
    meankl = tf.reduce_mean(kloldnew)
    meanent = tf.reduce_mean(ent)
    pol_entpen = (-entcoeff) * meanent

    ratio = tf.exp(pi.pd.logp(ac) - oldpi.pd.logp(ac)) # pnew / pold
    surr1 = ratio * atarg # surrogate from conservative policy iteration
    surr2 = tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg #
    pol_surr = - tf.reduce_mean(tf.minimum(surr1, surr2)) # PPO's pessimistic surrogate (L^CLIP)
    vf_loss = tf.reduce_mean(tf.square(pi.vpred - ret))
    total_loss = pol_surr + pol_entpen + vf_loss
    losses = [pol_surr, pol_entpen, vf_loss, meankl, meanent]
    loss_names = ["pol_surr", "pol_entpen", "vf_loss", "kl", "ent"]

    var_list = pi.get_trainable_variables()
    lossandgrad = U.function([ob, ac, atarg, ret, lrmult], losses + [U.flatgrad(total_loss, var_list)])
    adam = MpiAdam(var_list, epsilon=adam_epsilon)

    assign_old_eq_new = U.function([],[], updates=[tf.assign(oldv, newv)
        for (oldv, newv) in zipsame(oldpi.get_variables(), pi.get_variables())])
    compute_losses = U.function([ob, ac, atarg, ret, lrmult], losses)

    U.initialize()
    adam.sync()

    # Prepare for rollouts
    # ----------------------------------------
    seg_gen = traj_segment_generator(pi, env, timesteps_per_actorbatch, stochastic=True)

    episodes_so_far = 0
    timesteps_so_far = 0
    iters_so_far = 0
    tstart = time.time()
    lenbuffer = deque(maxlen=100) # rolling buffer for episode lengths
    rewbuffer = deque(maxlen=100) # rolling buffer for episode rewards

    assert sum([max_iters>0, max_timesteps>0, max_episodes>0, max_seconds>0])==1, "Only one time constraint permitted"

    while True:
        loop_cnt = 0
        if callback: callback(locals(), globals())

        if loop_cnt*timesteps_per_actorbatch > max_timesteps:
            break
        # if max_timesteps and timesteps_so_far >= max_timesteps:
        #     break
        # elif max_episodes and episodes_so_far >= max_episodes:
        #     break
        # elif max_iters and iters_so_far >= max_iters:
        #     break
        # elif max_seconds and time.time() - tstart >= max_seconds:
        #     break

        if schedule == 'constant':
            cur_lrmult = 1.0
        elif schedule == 'linear':
            cur_lrmult =  max(1.0 - float(timesteps_so_far) / max_timesteps, 0)
        else:
            raise NotImplementedError

        logger.log("********** Iteration %i ************"%iters_so_far)

        seg = seg_gen.__next__()
        if use_crm and (not average_rm):
            add_vtarg_and_adv_crm_multi_trajs(seg, gamma, lam)
        else:
            add_vtarg_and_adv(seg, gamma, lam)

        # ob, ac, atarg, ret, td1ret = map(np.concatenate, (obs, acs, atargs, rets, td1rets))
        ob, ac, atarg, tdlamret = seg["ob"], seg["ac"], seg["adv"], seg["tdlamret"]
        vpredbefore = seg["vpred"] # predicted value function before udpate
        atarg = (atarg - atarg.mean()) / atarg.std() # standardized advantage function estimate
        d = Dataset(dict(ob=ob, ac=ac, atarg=atarg, vtarg=tdlamret), deterministic=pi.recurrent)
        optim_batchsize = optim_batchsize or ob.shape[0]

        if hasattr(pi, "ob_rms"): pi.ob_rms.update(ob) # update running mean/std for policy

        assign_old_eq_new() # set old parameter values to new parameter values
        logger.log("Optimizing...")
        logger.log(fmt_row(13, loss_names))
        # Here we do a bunch of optimization epochs over the data
        for _ in range(optim_epochs):
            losses = [] # list of tuples, each of which gives the loss for a minibatch
            for batch in d.iterate_once(optim_batchsize):
                *newlosses, g = lossandgrad(batch["ob"], batch["ac"], batch["atarg"], batch["vtarg"], cur_lrmult)
                adam.update(g, optim_stepsize * cur_lrmult)
                losses.append(newlosses)
            logger.log(fmt_row(13, np.mean(losses, axis=0)))

        logger.log("Evaluating losses...")
        losses = []
        for batch in d.iterate_once(optim_batchsize):
            newlosses = compute_losses(batch["ob"], batch["ac"], batch["atarg"], batch["vtarg"], cur_lrmult)
            losses.append(newlosses)
        meanlosses,_,_ = mpi_moments(losses, axis=0)
        logger.log(fmt_row(13, meanlosses))
        for (lossval, name) in zipsame(meanlosses, loss_names):
            logger.record_tabular("loss_"+name, lossval)
        logger.record_tabular("ev_tdlam_before", explained_variance(vpredbefore, tdlamret))
        lrlocal = (seg["ep_lens"], seg["ep_rets"]) # local values
        listoflrpairs = MPI.COMM_WORLD.allgather(lrlocal) # list of tuples
        lens, rews = map(flatten_lists, zip(*listoflrpairs))
        lenbuffer.extend(lens)
        rewbuffer.extend(rews)
        logger.record_tabular("EpLenMean", np.mean(lenbuffer))
        logger.record_tabular("EpRewMean", np.mean(rewbuffer))
        logger.record_tabular("EpThisIter", len(lens))
        episodes_so_far += len(lens)
        timesteps_so_far += sum(lens)
        iters_so_far += 1
        logger.record_tabular("EpisodesSoFar", episodes_so_far)
        logger.record_tabular("TimestepsSoFar", timesteps_so_far)
        logger.record_tabular("TimeElapsed", time.time() - tstart)

        logger.record_tabular("average reward per step",seg["reward_per_step"])
        if MPI.COMM_WORLD.Get_rank()==0:
            logger.dump_tabular()

    return pi

def flatten_lists(listoflists):
    return [el for list_ in listoflists for el in list_]
